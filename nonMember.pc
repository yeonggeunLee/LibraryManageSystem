#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

//#ifdef WIN32
#include <windows.h>
/*---------------  화면 커서 위치 제어 ----------------------*/
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
#define getch() _getch()

void DB_connect();
void search_book();
void register_user();
void login_user();

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

void sql_error(char *msg);

// win32 Visual C 컴파일시 추가
#define getch() _getch()

void main()
{
	DB_connect();

	getch();
}

void DB_connect()
{
EXEC SQL BEGIN DECLARE SECTION;
   VARCHAR uid[80];
   VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

   /* 본인 계정이름으로 바꾸어 쓸 것 */
   strcpy((char *)uid.arr,"b20213070@//sedb.deu.ac.kr:1521/orcl");
   uid.len = (short) strlen((char *)uid.arr);
   /* 본인 계정 암호로 바꾸어 쓸 것 */
   strcpy((char *)pwd.arr,"20213070");
   pwd.len = (short) strlen((char *)pwd.arr);

   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405){ 
		printf("\7Connect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}

    printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

/*--------------------------------------------------------------------------
1.1 도서검색(비회원)
-------------------------------------------------------------------------- */

void search_book() 
{
EXEC SQL BEGIN DECLARE SECTION;
   varchar v_book_number[12];
   varchar v_book_title[37];
   varchar v_book_author[12];
   varchar v_book_publisher[12];
   varchar v_book_code[12];

   char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

   char inputBookNum[10];
   char inputBookTitle[10];
   char inputBookAuthor[10];
   char inputBookPublisher[10];
   char inputBookCode[10];

   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

   printf("찾을 도서의 번호를 입력하세요 : ");
   gets(inputBookNum);

   printf("찾을 도서의 이름를 입력하세요 : ");
   gets(inputBookTitle);

   printf("찾을 도서의 저자를 입력하세요 : ");
   gets(inputBookAuthor);

   printf("찾을 도서의 출판사를 입력하세요 : ");
   gets(inputBookPublisher);

   printf("찾을 도서의 분류코드를 입력하세요 : ");
   gets(inputBookCode);


   /* 실행시킬 SQL 문장*/
   sprintf(dynstmt, "SELECT book_number, book_title, book_author, book_publisher, book_code FROM books WHERE to_char(book_number) LIKE '%%%s%%' AND book_title LIKE '%%%s%%' AND book_author LIKE '%%%s%%' AND book_publisher LIKE '%%%s%%' AND to_char(book_code) LIKE '%%%s%%' ", inputBookNum, inputBookTitle, inputBookAuthor, inputBookPublisher, inputBookCode);
   
   printf("dynstmt : %s\n", dynstmt);

   EXEC SQL PREPARE S FROM :dynstmt;
   
   /* 커서 선언 */   
   EXEC SQL DECLARE c_cursor CURSOR FOR S ;
  
   /* 커서 오픈 */
   EXEC SQL OPEN c_cursor;

   EXEC SQL WHENEVER NOT FOUND DO break;
   
   printf("| 책번호   |        책이름        |   저자   |  출판사  | 분류코드 | \n");
   
    for (;;)
    {
        EXEC SQL FETCH c_cursor INTO :v_book_number, :v_book_title, :v_book_author, :v_book_publisher, :v_book_code;

	v_book_number.arr[v_book_number.len] = '\0' ;
	v_book_title.arr[v_book_title.len] = '\0' ;
	v_book_author.arr[v_book_author.len] = '\0' ;
	v_book_publisher.arr[v_book_publisher.len] = '\0' ;
	v_book_code.arr[v_book_code.len] = '\0' ;

	printf("| %-8s | %-20s | %-8s | %-8s | %-8s | \n", v_book_number.arr, v_book_title.arr, v_book_author.arr, v_book_publisher.arr, v_book_code.arr);
    }
   
   EXEC SQL CLOSE c_cursor;

}


/*--------------------------------------------------------------------------
1.2 유저 회원가입
-------------------------------------------------------------------------- */

void register_user()
{
EXEC SQL BEGIN DECLARE SECTION;
   varchar v_user_number[12];
   varchar v_user_name[37];

   char dynstmt[1000];
   char checkstmt[1000];
EXEC SQL END DECLARE SECTION;

   char inputUserNum[10];
   char inputUserName[30];

   /* Register sql_error() as the error handler. */
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:");

   printf("사용자 번호를 입력하세요 : ");
   gets(inputUserNum);

   printf("사용자 이름을 입력하세요 : ");
   gets(inputUserName);

   sprintf(checkstmt, "SELECT USER_NUMBER FROM USERS WHERE USER_NUMBER = %s", inputUserNum);
   
   EXEC SQL PREPARE S FROM :checkstmt;
   
   /* 커서 선언 */   
   EXEC SQL DECLARE c_cursor CURSOR FOR S ;
  
   /* 커서 오픈 */
   EXEC SQL OPEN c_cursor;

   EXEC SQL FETCH c_cursor INTO :v_user_number;

   v_user_number.arr[v_user_number.len] = '\0' ;

   if (strcmp(v_user_number.arr, inputUserNum) == 0)
   {
        printf("중복된 번호가 있습니다.");
        EXEC SQL CLOSE c_cursor;
        return;
   }

   sprintf(dynstmt, "INSERT INTO USERS (USER_NUMBER, USER_NAME) VALUES (%s, '%s')", inputUserNum, inputUserName);
   
   printf("dynstmt : %s", dynstmt);

   EXEC SQL PREPARE S FROM :dynstmt;
   
   EXEC SQL EXECUTE S;

   printf("회원가입에 성공했습니다.");

   EXEC SQL COMMIT WORK ;
}



/*--------------------------------------------------------------------------
1.3 유저 로그인
-------------------------------------------------------------------------- */
void login_user()
{
    EXEC SQL BEGIN DECLARE SECTION;
        varchar v_user_number[11];
        varchar v_user_name[11];
    EXEC SQL END DECLARE SECTION;

    char inputUserNumber[10];
    char inputUserName[10];

    printf("로그인을 위해 사용자 번호를 입력하세요 : ");
    gets(inputUserNumber);
    printf("로그인을 위해 사용자 이름을 입력하세요 : ");
    gets(inputUserName);

    sprintf(v_user_number.arr, "%s", inputUserNumber);
    v_user_number.len = strlen(v_user_number.arr);
    sprintf(v_user_name.arr, "%s", inputUserName);
    v_user_name.len = strlen(v_user_name.arr);

    EXEC SQL SELECT user_number, user_name INTO :v_user_number, :v_user_name
    FROM users
    WHERE user_number = :v_user_number AND user_name = :v_user_name;

    if (v_user_number.len != 0 && v_user_name.len != 0) {
        printf("로그인 성공.\n");
    } else {
        printf("로그인 실패. 사용자 번호와 이름을 확인해주세요.\n");
    }
}




void sql_error(char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof(err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);
    getch();

    EXEC SQL ROLLBACK WORK;
}